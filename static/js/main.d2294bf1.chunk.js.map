{"version":3,"sources":["SortingAlgos/SortingAlgos.js","SortingVisualizer/Popup.js","SortingVisualizer/ProgressBar.js","SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSort","arr","animations","ascending","mergeSortHelper","slice","length","start","end","middle","Math","floor","first_half_start","first_half_end","second_half_start","second_half_end","sorted_first_half","sorted_second_half","sorted","i","j","k","push","quickSort","unsorted","quickSortHelper","swap","temp","pivot","insertionSort","splice","selectionSort","min","Infinity","indexMin","startIndex","counter","jMin","bubbleSort","expression","heapSort","size","heapify","array","max_min","left","right","Popup","props","className","style","borderColor","border_colour","content","ProgressBar","width","progress","id","MAX_LEN","PRIMARY_COLOR","SECONDARY_COLOR","TERTIARY_COLOR","delay","SortingVisualizer","useState","setArr","unsortedArr","setUnsortedArr","setAscending","curAnimation","setCurAnimations","settingsOpen","setSettingsOpen","resetArray","setResetArray","numElements","setNumElements","numElementsColour","pow","displayedNumElements","setDisplayedNumElements","displayedElementsColour","setDisplayedElementsColour","animationSpeed","setAnimationSpeed","button_colour","displayedAnimationSpeed","setDisplayedAnimationSpeed","displayedAnimationSpeedColour","setDisplayedAnimationSpeedColour","selectedAlgorithm","setSelectedAlgorithm","doneButtonColour","setDoneButtonColour","setProgress","determineAnimationSpeedMS","algorithm","useEffect","newArray","handleResetArray","randomIntFromInterval","changeColour","arrayBars","setColPrimary","animation_speed_ms","extra_delay","i_barOne","i_barTwo","barOneStyle","barTwoStyle","color","setTimeout","backgroundColor","changeBarHeight","i_bar","newHeight","height","swapBars","newHeightOne","newHeightTwo","handleTriColourChange","colour","set","setArraySorted","time","document","getElementsByClassName","final_animation_speed","forEach","_","index","console","log","isSorted","js_sorted","sort","a","b","max","random","toggleSettings","alert","updateNumElements","e","new_len","target","value","updateAnimationSpeed","new_speed","toggleDoneButtonColour","hover","handleTestSorting","merge_sorted","quick_sorted","insertion_sorted","selection_sorted","bubble_sorted","heap_sorted","testSorting","buttonsClickable","resetControls","selectedButtonStyle","pointerEvents","rel","href","map","onClick","Date","ANIMATION_SPEED_MS","isColourChange","cur","handleMergeSort","handleQuickSort","handleHeapSort","Promise","resolve","then","round","handleBubbleSort","handleSelectionSort","handleInsertionSort","type","borderImage","onChange","border","onMouseEnter","onMouseLeave","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d2294bf1.chunk.js","sourcesContent":["//Returns sorted array using merge sort O(nlogn) time and O(n) space\n//Merge Sort function with parameters for array and boolean to determine ascending or descending order \n//Animations list is a list of triplets [(index, index), (index, index), (index, value)] for indicies that were compared and value that was used to overwrite the index\nexport function mergeSort(arr, animations=[], ascending=true){\n    return mergeSortHelper(arr.slice(), 0, arr.length-1, animations, ascending);\n}\n\nfunction mergeSortHelper(arr, start, end, animations, ascending=true) {\n    let middle = Math.floor((start+end)/2); //split the array in half\n    \n    //Start and end indicies of the two half-arrays\n    const first_half_start = start;\n    const first_half_end = middle;\n    const second_half_start = middle+1;\n    const second_half_end = end;\n    \n    //Shallow copy of original array for first half\n    let sorted_first_half = arr.slice()\n    let sorted_second_half = arr.slice();\n    if(first_half_end - first_half_start > 0){\n        sorted_first_half = mergeSortHelper(arr, first_half_start, first_half_end, animations, ascending); //sort the first half recursively and update first half\n    }\n    if(second_half_end - second_half_start > 0){\n        sorted_second_half = mergeSortHelper(arr, second_half_start, second_half_end, animations, ascending); //sort the second half recursively and update second half\n    }\n    \n    const sorted = arr.slice(); //Sorted Array\n    let i = first_half_start; //Pointers to compare each element in sorted half-arrays\n    let j = second_half_start;\n    let k = i; //Pointer to update correct position in sorted array\n\n    while(i<=first_half_end && j<=second_half_end){\n        animations.push([i,j]); //push once to change colour\n        animations.push([i,j]); //push second time to revert colour\n        if((sorted_first_half[i] > sorted_second_half[j] && ascending) || (sorted_first_half[i] <= sorted_second_half[j] && !ascending)) { //push back values into sorted array as appropriate and increment pointers\n            animations.push([k, sorted_second_half[j]]); \n            sorted[k++] = sorted_second_half[j++]; //update sorted array and increment k and j\n        }\n        else{\n            animations.push([k, sorted_first_half[i]]); //update the value at k in sorted array with value at i\n            sorted[k++] = sorted_first_half[i++]; \n        }\n    }\n    \n    while(j <= second_half_end) { //add remaining elements from second half\n        animations.push([j, j]);    //push once to change colour\n        animations.push([j, j]);    //push second time to revert colour\n        animations.push([k, sorted_second_half[j]]);\n        sorted[k++] = sorted_second_half[j++];\n    }\n    while(i <= first_half_end) { //add remaining elements from first half\n        animations.push([i, i]);    //push once to change colour\n        animations.push([i, i]);    //push second time to revert colour\n        animations.push([k, sorted_first_half[i]]);\n        sorted[k++] = sorted_first_half[i++];\n    }\n    return sorted;\n}\n\n\n/*\nQuick Sort Implementation:\n-choose middle element as pivot and swap with first\nfor ascending order (same algorithm for descending, but high and low are reversed):\n-low starts at beginning and high starts at end\n-move low pointer first\n-swap with high pointer after cross\n*/\n//Quicksort function O(nlogn) time and O(logn) space\nexport function quickSort(unsorted, animations = [], ascending = true) {\n    const sorted = unsorted.slice();\n\tquickSortHelper(sorted, 0, sorted.length, animations, ascending);\n\treturn sorted;\n}\n\n//quick sort helper functions:\nconst swap = ( (arr, i, j, animations) => {\n    if (i === j && i < arr.length) return;\n\n    animations.push([i,j]); //push once to change colour\n    animations.push([i,j]); //push second time to revert colour\n    animations.push([i, arr[j], j, arr[i]]);\n\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n});\n\nconst quickSortHelper = ( (unsorted, start, end, animations, ascending) => {\n    //start is (start index) of subsection and end is (end index + 1)\n    const size = end - start;\n\tif (size > 1) {\n        const middle = Math.floor((start + end) / 2);\n\t\tconst pivot = unsorted[middle]; //select pivot\n\t\tswap(unsorted, start, middle, animations); //move pivot to front\n        animations.push([start, 'green', true]); //Set pivot to green\n\t\tlet i = start + 1; //select low pointer (ascending) / high (descending)\n\t\tlet j = end-1; //select high pointer (ascending) / low (descending)\n\t\twhile (true) { //cross eventually happens, so we don't ever have to change this boolean\n            while(i<=j && ((ascending && unsorted[i]<=pivot) || (!ascending && unsorted[i] >= pivot))){ //increment i \n                animations.push([i,i]);     //push once to change colour\n                animations.push([i,i]);     //push second time to revert colour\n                ++i;\n            }\n            while(i<=j && ((ascending && unsorted[j] >= pivot) || (!ascending && unsorted[j] <= pivot))){ //if no cross, decrement j\n                animations.push([j,j]);     //push once to change colour\n                animations.push([j,j]);     //push second time to revert colour\n                --j;\n            }\n\t\t\tif (i > j) { //a cross happened\n                animations.push([start, 'green', false]); //Reset pivot from green\n                swap(unsorted, start, j, animations); //swap pivot with j\n                quickSortHelper(unsorted, start, j, animations, ascending); //recursive call to sort subcollections in 0(1) memory\n\t\t\t\tquickSortHelper(unsorted, j + 1, end, animations, ascending);\n\t\t\t\treturn; //exit the function to not loop infinitely\n\t\t\t}\n\t\t\telse { //swap high and low if no cross \n\t\t\t\tswap(unsorted, i, j, animations);\n                i++;\n                j--;\n\t\t\t}\n\t\t}\n\t}\n});\n\n\n\n//Insertion Sort O(n^2) time and O(1) space complexity\nexport function insertionSort(unsorted, animations=[], ascending=true){\n    const sorted = [];\n    if(unsorted.length){ //check if unsorted list empty\n        sorted.push(unsorted[0]); //start sorted with single value\n        for(let i=1; i<unsorted.length; ++i) { //traverse through array left to right\n            animations.push([i, 'green', true]); //Set green\n            let j=0;\n            while(j<sorted.length && ((unsorted[i] > sorted[j] && ascending) || (unsorted[i] < sorted[j] && !ascending))) { //Find location in previous values to insert i\n                animations.push([j, 'red', true]); //Set red\n                animations.push([j, 'red', false]); //Reset red\n                ++j;\n            }\n\n            sorted.splice(j, 0, unsorted[i]); //insert i in correct location\n            animations.push([j, sorted[j]]);\n            for(let k=j+1; k<sorted.length; ++k){ //add the position of remaining bars to shift the greater bars right\n                animations[animations.length-1].push(k);\n                animations[animations.length-1].push(sorted[k]);\n            }\n            animations.push([i, 'green', false]); //Reset green\n        }\n    }\n    return sorted;\n}\n\n//Selection Sort O(n^2) time and O(1) space complexity\nexport function selectionSort(unsorted, animations=[], ascending=true) {\n    const sorted = unsorted.slice();\n    if(sorted.length) {\n        let min = Infinity, indexMin = 0;\n        const startIndex = ascending ? 0 : sorted.length - 1;\n        const counter = ascending ? 1 : -1;\n        const jMin = ascending ? 0 : sorted.length + 1;\n\n        for(let i = startIndex; i !== sorted.length - startIndex - 1; i += counter) {\n            animations.push([i, 'green', true]); //Change to green\n            min = Infinity;\n            indexMin = startIndex;\n            for(let j=i; j !== sorted.length - jMin; j += counter) {\n                if(j!== i){\n                    animations.push([j, 'red', true]);\n                    animations.push([j, 'red', false]);\n                }\n                if (sorted[j] < min) {\n                    min = sorted[j]; \n                    indexMin = j;\n                }\n            }\n            animations.push([i, 'green', false]); //Revert from green\n            if (indexMin !== i) {\n                sorted[indexMin] = sorted[i];\n                sorted[i] = min;\n                animations.push([indexMin, sorted[indexMin], i, min]);\n            }\n            \n        }\n    }\n    return sorted;\n}\n\n//https://www.geeksforgeeks.org/bubble-sort/\n//Bubble Sort O(n^2) time and O(1) space complexity\nexport function bubbleSort(unsorted, animations=[], ascending=true) {\n    const sorted = unsorted.slice();\n    const end = sorted.length-1; \n    for(let i=0; i < end; i++){\n        for(let j=0; j < end-i; j++){\n            const expression = ascending ? sorted[j] > sorted[j+1] : sorted[j] < sorted[j+1];\n            if(expression){\n                swap(sorted, j, j+1, animations);\n            }\n        }\n    }\n    return sorted;\n}\n\n\n//https://big-o.io/algorithms/comparison/heapsort/\n//Heap Sort (improved selection sort) O(n logn) time and O(1) space complexity <- algorithm can be done in O(1) space complexity but need O(n) space complexity to build heap\nexport function heapSort(unsorted, animations=[], ascending=true){\n    const sorted = unsorted.slice();\n    let size = sorted.length;\n\n    // build heapSort (rearrange array)\n    for (let i = Math.floor(size / 2 - 1); i >= 0; i--) {\n        animations.push([i,i]);\n        animations.push([i,i]);\n        heapify(sorted, size, i, animations, ascending);\n    }\n\n    // one by one extract an element from heapSort\n    for (let i = size - 1; i >= 0; i--) {\n        animations.push([i,i]);\n        animations.push([i,i]);\n        // move current root to end\n        swap(sorted, 0, i, animations);\n\n        // call max heapify on the reduced heapSort\n        heapify(sorted, i, 0, animations, ascending);\n    }\n\n    return sorted;\n}\n\n// to heapify a subtree rooted with node i which is an index in array\n// O(n) space complexity to build heap\n// min heap\nconst heapify = (array, size, i, animations, ascending) => {\n\n    let max_min = i;\n    let left = 2*i + 1;\n    let right = 2*i + 2;\n    \n    let expression = ascending ? array[left] > array[max_min] : array[left] < array[max_min];\n    \n    // if left child is larger than root and ascending or...\n    if(left < size && expression) max_min = left;\n    \n    expression = ascending ? array[right] > array[max_min] : array[right] < array[max_min];\n    \n    // if right child is larger than max_min and ascending or...\n    if (right < size && expression) max_min = right;\n    \n    // if max_min is not root\n    if (max_min !== i) {\n        swap(array, i, max_min, animations);\n        // recursively heapify the affected sub-tree\n        heapify(array, size, max_min, animations, ascending);\n    }\n}","import React from \"react\";\nimport \"./Popup.css\"\n\nexport const Popup = (props) => {\n  return (\n    <div className=\"popup-box\">\n      <div className=\"box\" style={{borderColor: props.border_colour}}>\n        {props.content}\n      </div>\n    </div>\n  );\n};\n ","import React from \"react\";\nimport \"./ProgressBar.css\"\n\nexport const ProgressBar = (props) => {\n    const width = props.progress;\n    return(\n        <div className=\"progress\">\n            <div className=\"progress__fill\" id = \"fill\" style={{\"--width\":`${width}`}}></div>\n            <span className=\"progress__text\" id = \"text\">{width}%</span>\n        </div>\n        /*<div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>()*/\n    )\n}","import { useEffect, useState } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport {mergeSort, quickSort, insertionSort, selectionSort, bubbleSort, heapSort} from '../SortingAlgos/SortingAlgos';\nimport {Popup} from './Popup';\nimport {ProgressBar} from './ProgressBar';\n\n//Max and min values in array\nconst MAX = 1000;\nconst MIN = 10;\n//Max and min length of array\nconst MIN_LEN = 50;\nconst MAX_LEN = 1000;\n\n//Main colour of array bars\nconst PRIMARY_COLOR = 'white';\n\n//Colour of array bars being compared in animation\nconst SECONDARY_COLOR = 'red';\n\n//Third colour for pivot, insertion sort, etc.\nconst TERTIARY_COLOR = 'green';\n\n//Delay before starting animation\nconst delay = 100;\n\nexport function SortingVisualizer() {\n    const [arr, setArr] = useState([]); //Array\n    const [unsortedArr, setUnsortedArr] = useState([]); //Copy of array that remains unsorted\n    const [ascending, setAscending] = useState(true); //Determines sorting order\n    const [curAnimation, setCurAnimations] = useState(false); //True if currently animating\n    const [settingsOpen, setSettingsOpen] = useState(false); //True is settings are open\n    const [resetArray, setResetArray] = useState(false); //Determines whether array should be reset when closing settings (if numElements was changed in settings or array is currently in green sorted state)\n    \n    const [numElements, setNumElements] = useState(300); //size of array\n    //`rgb(${17 / 99 * numElements - 85 / 33},${-2 / 3645 * Math.pow(numElements - 825, 2) + 250},${-17 / 90 * numElements + 850 / 3})` <-- for 1500 (max) 150 (min)\n    const numElementsColour = `rgb(${ 51/190 * numElements - 255 / 19},${ -2 / 1805 * Math.pow(numElements - 525, 2) + 250},${-51 / 190 * numElements + 5100 / 19})` ; //display colour for number of elements\n    const [displayedNumElements, setDisplayedNumElements] = useState(300); //updated when saving settings\n    const [displayedElementsColour, setDisplayedElementsColour] = useState(numElementsColour);\n    \n    const [animationSpeed, setAnimationSpeed] = useState(\"slow\"); \n    const button_colour = animationSpeed === \"slow\" ? \"#fa8072\" : animationSpeed === \"medium\" ? \"#ffa500\" : \"#3cb371\";\n    const [displayedAnimationSpeed, setDisplayedAnimationSpeed] = useState(\"Slow\"); //updated when saving settings\n    const [displayedAnimationSpeedColour, setDisplayedAnimationSpeedColour] = useState(button_colour); \n    \n    const [selectedAlgorithm, setSelectedAlgorithm] = useState(\"\");\n    const [doneButtonColour, setDoneButtonColour] = useState(\"white\"); //border and hover colour of done button (in settings)\n\n    const [progress, setProgress] = useState(0); //Progress of progress bar [only used for O(n^2) functions]\n\n    const determineAnimationSpeedMS = (algorithm) => {\n        if(numElements <= 100) {\n            return animationSpeed === \"slow\" ? 10 : animationSpeed === \"medium\" ? 6 : 3;\n        }\n        else if(algorithm === \"merge\" || algorithm === \"quick\" || algorithm === \"heap\"){\n            return animationSpeed === \"slow\" ? 1.5 : animationSpeed === \"medium\" ? 1 : 0.5;\n        }\n        else{\n            return animationSpeed === \"slow\" ? 1 : animationSpeed === \"medium\" ? 0.1 : 0.01;\n        }\n    }\n\n    //Generate array on load\n    useEffect( () => {\n        newArray();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    //Generate new array\n    const newArray = () => {\n        handleResetArray(true); //Resets colours & selected algorithm\n        const arr = [];\n        for(let i = 0; i < numElements; ++i){\n            arr.push(randomIntFromInterval(MAX, MIN));  //Random number from range MIN to MAX\n            //arr.push(Math.floor(Math.random() * (MAX-MIN+1) + MIN)); \n        }\n        setSelectedAlgorithm(\"\");\n        setArr(arr);\n        setUnsortedArr(arr);\n    }\n\n    //Change colour of array bar\n    const changeColour = (animations, arrayBars, setColPrimary, i, animation_speed_ms, extra_delay=0) => {\n        const [i_barOne, i_barTwo] = animations[i];\n        const barOneStyle = arrayBars[i_barOne].style;\n        const barTwoStyle = arrayBars[i_barTwo].style;\n        const color = setColPrimary ?  PRIMARY_COLOR : SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * animation_speed_ms + extra_delay + delay);\n    }\n\n    //change height of array bar\n    const changeBarHeight = (i_bar, newHeight, arrayBars) => {\n        const barOneStyle = arrayBars[i_bar].style;\n        barOneStyle.height = `${newHeight/10}%`\n    }\n\n    //swap position of two array bars\n    const swapBars = (animations, arrayBars, i, animation_speed_ms, extra_delay=0) => {\n        setTimeout( () => {\n            const [i_barOne, newHeightOne, i_barTwo, newHeightTwo] = animations[i];\n            changeBarHeight(i_barOne, newHeightOne, arrayBars);\n            changeBarHeight(i_barTwo, newHeightTwo, arrayBars);\n        }, i* animation_speed_ms + extra_delay + delay);\n    }\n\n    //change bar colour to either primary, secondary, or tertiary\n    const handleTriColourChange = (animations, arrayBars, i, animation_speed_ms, extra_delay=0) => {\n        const [i_barOne, colour, set] = animations[i];\n        const barOneStyle = arrayBars[i_barOne].style;\n        if(colour === 'green'){ //change pivot to green \n            setTimeout(() => { \n                barOneStyle.backgroundColor = set ? TERTIARY_COLOR : PRIMARY_COLOR; //check if we are setting or resetting bar\n            }, i * animation_speed_ms + extra_delay + delay);\n        }\n        else{ //change to red\n            setTimeout(() => {\n                barOneStyle.backgroundColor = set ? SECONDARY_COLOR : PRIMARY_COLOR; //check if we are setting or resetting bar\n            }, i * animation_speed_ms + extra_delay + delay);\n        }\n    }\n\n    //Set array to sorted state\n    const setArraySorted = (sorted, time, animation_speed_ms, extra_delay=0) => {\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const final_animation_speed = 2; //ms\n\n        sorted.forEach((_, index) => {\n            setTimeout(() => {\n                const barStyle = arrayBars[index].style;\n                barStyle.backgroundColor = TERTIARY_COLOR;\n            }, time*animation_speed_ms + index*final_animation_speed + extra_delay + delay);\n        });\n\n        setTimeout( () => { //set state array to sorted array\n            setArr(sorted);\n            setCurAnimations(false);\n            console.log(isSorted(sorted, unsortedArr));\n        }, time*animation_speed_ms + sorted.length*final_animation_speed + extra_delay + delay);\n    }\n\n    //Merge Sort Function\n    const handleMergeSort = () => {\n        const animations = [];\n        const start = new Date();\n        const sorted = mergeSort(arr, animations, ascending);\n        setCurAnimations(true);\n        setSelectedAlgorithm(\"merge\");\n        const ANIMATION_SPEED_MS = determineAnimationSpeedMS(\"merge\");\n\n        //animations -- animations is grouped into trios of ([i,j], [i,j], [k, value])\n        for(let i = 0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColourChange = i%3 !== 2; //Don't change colour for every third entry (index 2)\n            const cur = new Date() - start;\n            if(isColourChange) { //check to change colour\n                const setColPrimary = i % 3 === 0 ? false : true; //Change colour to secondary if first element in trio else primary colour\n                changeColour(animations, arrayBars, setColPrimary, i, ANIMATION_SPEED_MS, cur);\n            }\n            else { //change height\n                setTimeout( () => {\n                    const [i_barOne, newHeight] = animations[i];\n                    changeBarHeight(i_barOne, newHeight, arrayBars);\n                }, i* ANIMATION_SPEED_MS + cur + delay);\n            }\n        }\n        setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date()-start);\n    }\n    \n    //Quick Sort Function\n    const handleQuickSort = () => {\n        const animations = [];\n        const start = new Date();\n        const sorted = quickSort(arr, animations, ascending);\n        setCurAnimations(true);\n        setSelectedAlgorithm(\"quick\");\n        const ANIMATION_SPEED_MS = determineAnimationSpeedMS(\"quick\");\n\n        //animations\n        let setColPrimary = true; //switch between primary and secondary colour\n        for(let i = 0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColourChange = animations[i].length === 2;\n            const cur = new Date() - start;\n            if(isColourChange) { //change colour of bar\n                setColPrimary = !setColPrimary;\n                changeColour(animations, arrayBars, setColPrimary, i, ANIMATION_SPEED_MS, cur);\n            }\n            else if(animations[i].length===3){ //set / reset colour of pivot\n                handleTriColourChange(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n            }\n            else { //swap bars\n                swapBars(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n            }\n        }\n        setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n    }\n    \n    //Heap Sort Function\n    const handleHeapSort = () => {\n        const animations = [];\n        const start = new Date();\n        const sorted = heapSort(arr, animations, ascending);\n        setCurAnimations(true);\n        setSelectedAlgorithm(\"heap\");\n\n        const ANIMATION_SPEED_MS = determineAnimationSpeedMS(\"heap\");\n\n        //animations\n        let setColPrimary = true; //switch between primary and secondary colour\n        for(let i = 0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColourChange = animations[i].length === 2;\n            const cur = new Date() - start;\n            if(isColourChange) { //change colour of bar\n                setColPrimary = !setColPrimary;\n                changeColour(animations, arrayBars, setColPrimary, i, ANIMATION_SPEED_MS, cur);\n            }\n            else { //swap bars\n                swapBars(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n            }\n        }\n        setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n    }\n    \n    //Insertion Sort Function\n    const handleInsertionSort = () => {\n        const animations = [];\n        const start = new Date();\n        const sorted = insertionSort(arr, animations, ascending);\n        setCurAnimations(true);\n        setSelectedAlgorithm(\"insertion\");\n        const ANIMATION_SPEED_MS = determineAnimationSpeedMS(\"insertion\");\n        \n        //animations\n        if(numElements < 700) { //Only do progress bar for array longer than 700\n            for(let i = 0; i<animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const isColourChange = typeof animations[i][1] === 'string';\n                const cur = new Date() - start;\n                if(isColourChange) { //change colour to green or red\n                    handleTriColourChange(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                }\n                else {\n                    setTimeout( () => {\n                        for(let j=0; j<animations[i].length-1; j+=2){ //insert pivot in correct location of array and shift over all other elements \n                            const i_bar = animations[i][j];\n                            const newHeight = animations[i][j+1];\n                            changeBarHeight(i_bar, newHeight, arrayBars);\n                        }\n                        /*\n                        while(i < animations.length && typeof animations[i][1] !== 'string'){ //alternate method to above (more messy so not used)\n                            const [i_bar, newHeight] = animations[i];\n                            changeBarHeight(i_bar, newHeight, arrayBars);\n                            i++;\n                        }\n                        i--;\n                        */\n                    }, i* ANIMATION_SPEED_MS + cur + delay);\n                }\n            }\n            setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n        }\n        else {\n            new Promise(resolve => { //bring up progress bar\n                setProgress(1);\n                resolve();\n            }).then( () => {\n                for(let i = 0; i<animations.length; i++) {\n                    const arrayBars = document.getElementsByClassName('array-bar');\n                    const isColourChange = typeof animations[i][1] === 'string';\n                    new Promise(resolve => {\n                        setTimeout(()=> {\n                            if(i === animations.length-1){\n                                setProgress(0); //Turn off progress bar\n                            }\n                            else{\n                                setProgress(Math.round(i/animations.length*100)); //Updates progress bar\n                            }\n                        }, 0);\n                        resolve();\n                    }).then(() => {\n                        const cur = new Date() - start;\n                        if(isColourChange) { //change colour to green or red\n                            handleTriColourChange(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                        }\n                        else {\n                            setTimeout( () => {\n                                for(let j=0; j<animations[i].length-1; j+=2){ //insert pivot in correct location of array and shift over all other elements \n                                    const i_bar = animations[i][j];\n                                    const newHeight = animations[i][j+1];\n                                    changeBarHeight(i_bar, newHeight, arrayBars);\n                                }\n                            }, i* ANIMATION_SPEED_MS + cur + delay);\n                        }\n                    });\n                }\n            }).then(() => {\n                setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n            });\n        }\n    }\n\n    //Selection Sort Function\n    const handleSelectionSort = () => {\n        const animations = [];\n        const start = new Date();\n        const sorted = selectionSort(arr, animations, ascending);\n        setCurAnimations(true);\n        setSelectedAlgorithm(\"selection\");\n        const ANIMATION_SPEED_MS = determineAnimationSpeedMS(\"selection\");\n\n        //animations\n        if(numElements < 700){\n            for(let i = 0; i<animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const isColourChange = animations[i].length === 3;\n                const cur = new Date() - start;\n                if(isColourChange) { //change colour to green or red\n                    handleTriColourChange(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                }\n                else {\n                    swapBars(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                }\n            }\n            setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n        }\n        else {\n            new Promise(resolve => { //progress bar\n                setProgress(1);\n                resolve();\n            }).then( () => {\n                for(let i = 0; i<animations.length; i++) {\n                    const arrayBars = document.getElementsByClassName('array-bar');\n                    const isColourChange = animations[i].length === 3;\n                    new Promise(resolve => {\n                        setTimeout(()=> {\n                            if(i === animations.length-1){\n                                setProgress(0);\n                            }\n                            else{\n                                setProgress(Math.round(i/animations.length*100));\n                            }\n                        }, 0);\n                        resolve();\n                    }).then(() => {\n                        const cur = new Date() - start;\n                        if(isColourChange) { //change colour to green or red\n                            handleTriColourChange(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                        }\n                        else {\n                            swapBars(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                        }\n                    });\n                }\n            }).then(() => {\n                setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n            });\n        }\n    }\n\n    //Bubble Sort Function\n    const handleBubbleSort = () => {\n        const animations = [];\n        const start = new Date();\n        const sorted = bubbleSort(arr, animations, ascending);\n        setCurAnimations(true);\n        setSelectedAlgorithm(\"bubble\");\n        const ANIMATION_SPEED_MS = determineAnimationSpeedMS(\"bubble\");\n\n        //animations\n        let setColPrimary = true; //switch between primary and secondary colour\n        if(numElements < 700){\n            for(let i = 0; i<animations.length; i++) {\n                const arrayBars = document.getElementsByClassName('array-bar');\n                const isColourChange = animations[i].length === 2;\n                const cur = new Date() - start;\n                if(isColourChange) { //change colour of bar\n                    setColPrimary = !setColPrimary;\n                    changeColour(animations, arrayBars, setColPrimary, i, ANIMATION_SPEED_MS, cur);\n                }\n                else { //swap bars\n                    swapBars(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                }\n            }\n    \n            setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n        }\n        else{\n            new Promise(resolve => { //progress bar\n                setProgress(1);\n                resolve();\n            }).then( () => {\n                for(let i = 0; i<animations.length; i++) {\n                    const arrayBars = document.getElementsByClassName('array-bar');\n                    const isColourChange = animations[i].length === 2;\n                    new Promise(resolve => {\n                        setTimeout(()=> {\n                            if(i === animations.length-1){\n                                setProgress(0);\n                            }\n                            else{\n                                setProgress(Math.round(i/animations.length*100));\n                            }\n                        }, 0);\n                        resolve();\n                    }).then(() => {\n                        const cur = new Date() - start;\n                        if(isColourChange) { //change colour of bar\n                            setColPrimary = !setColPrimary; //gets warning about unsafe reference to variable\n                            changeColour(animations, arrayBars, setColPrimary, i, ANIMATION_SPEED_MS, cur);\n                        }\n                        else { //swap bars\n                            swapBars(animations, arrayBars, i, ANIMATION_SPEED_MS, cur);\n                        }\n                    });\n                }\n            }).then(() => {\n                setArraySorted(sorted, animations.length, ANIMATION_SPEED_MS, new Date() - start);\n            });\n        }\n    }\n\n    //Tests sorting algorithms\n    const testSorting = () => {\n        for (let i = 0; i < 100; i++) { //generate 100 array\n            const array = [];\n            const length = randomIntFromInterval(1000, 1); //Random length between 1000 and 1\n            for (let j = 0; j < length; j++) {\n              array.push(randomIntFromInterval(-1000, 1000)); //Random value between -1000 and 1000\n            }\n\n            //Append all sorting functions and compare them to the correct sorted array using the js sort function individually\n            const sorted = [];\n\n            const merge_sorted = mergeSort(array.slice(), [], ascending); \n            sorted.push(merge_sorted);\n    \n            const quick_sorted = quickSort(array.slice(), [], ascending);\n            sorted.push(quick_sorted);\n\n            const insertion_sorted = insertionSort(array.slice(), [], ascending);\n            sorted.push(insertion_sorted);\n\n            const selection_sorted = selectionSort(array.slice(), [], ascending);\n            sorted.push(selection_sorted);\n\n            const bubble_sorted = bubbleSort(array.slice(), [], ascending);\n            sorted.push(bubble_sorted);\n\n            const heap_sorted = heapSort(array.slice(), [], ascending);\n            sorted.push(heap_sorted);\n\n            for (let k = 0; k < sorted.length; k++) {\n                if(!isSorted(sorted[k], array)) return false;\n            }\n        }\n        \n        return true;\n    }\n\n    //Checks if individual array is sorted correcty\n    const isSorted = (sorted, unsorted) => {\n        const js_sorted = ascending ? unsorted.slice().sort((a,b) => a - b) : unsorted.slice().sort((a,b) => b - a); //sort using js sorting function\n        if (js_sorted.length !== sorted.length) return false;\n            for(let i = 0; i < js_sorted.length; i++){\n                if (js_sorted[i] !== sorted[i]) {\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    //Returns random integer from range (min, max)\n    const randomIntFromInterval = (max, min) => {\n        return Math.floor(Math.random() * (max-min+1) + min);\n    }\n\n    //Toggles ascending / descending sorting order\n    const toggleAscending = () => {\n        setAscending(!ascending);\n    }\n\n    //Open and close settings popup\n    const toggleSettings = () => {\n        setDoneButtonColour(\"white\");\n        if(!curAnimation) { //Only toggle if not currently animating\n            if(resetArray && numElements>=MIN_LEN && numElements<=MAX_LEN) { //Check if input is between max and min values && array needs to be reset on close\n                newArray();\n                setResetArray(false);\n            }\n            else if (numElements<MIN_LEN || numElements>MAX_LEN){ \n                alert(\"Please ensure number of elements is between 150 and 1500\");\n                return;\n            }\n            if (settingsOpen) {\n                handleResetArray(resetArray); //changes back colour, resets selected algorithm, and reorders array if needed\n                setDisplayedAnimationSpeed(animationSpeed === \"slow\" ? \"Slow\" : animationSpeed === \"medium\" ? \"Medium\" : \"Fast\");\n                setDisplayedNumElements(numElements);\n                setDisplayedElementsColour(numElementsColour);\n                setDisplayedAnimationSpeedColour(button_colour);\n            }\n            setSettingsOpen(!settingsOpen);\n        }\n    }\n\n    //Updates number of elements in array\n    const updateNumElements = (e) => {\n        const new_len = e.target.value;\n        if(new_len <= MAX_LEN && new_len !== numElements) {\n            setNumElements(new_len);\n            setResetArray(true);\n        }\n    }\n\n    //Updates speed of next animation\n    const updateAnimationSpeed = (new_speed) => {\n        setAnimationSpeed(new_speed);\n    }\n\n    //Updates colour of done button to match selected speed colour\n    const toggleDoneButtonColour = (hover, colour) => {\n        if (hover) {\n            setDoneButtonColour(colour);\n        }\n        else {   \n            setDoneButtonColour(\"white\");\n        }\n    }\n\n    //Handles ressetting the colour of array and selected algorithm. Also resets array order if needed\n    const handleResetArray = (set=false) => {\n        if(!set){\n            setArr(unsortedArr); //Check \n        }\n        setSelectedAlgorithm(\"\");\n        const arrayBars = document.getElementsByClassName('array-bar');\n        arr.forEach((_, index) => {\n            const barStyle = arrayBars[index].style;\n            barStyle.backgroundColor = PRIMARY_COLOR;\n        })\n    }\n\n    //Alert to know if testing passed or failed\n    const handleTestSorting = () => {\n        //add loading screen\n        if(testSorting()){\n            alert(\"Testing Passed\");\n        }\n        else{\n            alert(\"Testing Failed\");\n        }\n    }\n\n    //Styling to make buttons unclickable during animations\n    const buttonsClickable = curAnimation || unsortedArr !== arr ? \"unclickable\" : \"\";\n    const resetControls = curAnimation ? \"unclickable\" : \"\";\n    const selectedButtonStyle = {color:\"white\", backgroundColor:\"#4caf50\", pointerEvents:\"none\"};\n\n    return (\n        <div>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n            <div className = 'array-container'>\n                {\n                    arr.map((value, i) => (<div className='array-bar' \n                                                key = {i} \n                                                style={{\n                                                    backgroundColor: PRIMARY_COLOR, \n                                                    height:`${value/10}%`, \n                                                    \"--numBars\":`${displayedNumElements}`\n                                                }}\n                                            ></div>))\n                }\n            </div>\n            <br></br>\n            <div className='button-container'>\n                <div className=\"button-set control\">\n                    <h3 className=\"header\">Controls</h3>\n                    <span className={resetControls===\"unclickable\" ? \"not-allowed-cursor\" : \"\"}>\n                        <button className={`button control-button ${resetControls}`} onClick = {() => newArray()}>New Array</button>\n                        <button className={`button control-button ${resetControls}`} onClick={() => handleResetArray()}>Reset Array</button>\n                        <button className={`button control-button ${resetControls}`} onClick={() => handleTestSorting()}>Test Sorting Algorithms</button>\n                    </span>\n                </div>\n                <div className=\"button-set sorting\">\n                    <h3 className=\"header\">Algorithms</h3>\n                    <span className={buttonsClickable===\"unclickable\" ? \"not-allowed-cursor\" : \"\"}>\n                        <button \n                            className={`button sorting-button ${selectedAlgorithm !== \"merge\" && buttonsClickable}`} \n                            style={selectedAlgorithm===\"merge\" ? selectedButtonStyle : null} \n                            onClick={() => handleMergeSort()}\n                        >\n                            Merge Sort\n                        </button>\n                        <button \n                            className={`button sorting-button ${selectedAlgorithm !== \"quick\" && buttonsClickable}`} \n                            style={selectedAlgorithm===\"quick\" ? selectedButtonStyle : null} \n                            onClick={() => handleQuickSort()}\n                        >\n                            Quick Sort\n                        </button>\n                        <button \n                            className={`button sorting-button ${selectedAlgorithm !== \"heap\" && buttonsClickable}`} \n                            style={selectedAlgorithm===\"heap\" ? selectedButtonStyle : null} \n                            onClick={() => handleHeapSort()}\n                        >\n                            Heap Sort\n                        </button>\n                        <button \n                            className={`button sorting-button ${selectedAlgorithm !== \"bubble\" && buttonsClickable}`} \n                            style={selectedAlgorithm===\"bubble\" ? selectedButtonStyle : null} \n                            onClick={() => handleBubbleSort()}\n                        >\n                            Bubble Sort\n                        </button>\n                        <button \n                            className={`button sorting-button ${selectedAlgorithm !== \"selection\" && buttonsClickable}`} \n                            style={selectedAlgorithm===\"selection\" ? selectedButtonStyle : null} \n                            onClick={() => handleSelectionSort()}\n                        >\n                            Selection Sort\n                        </button>\n                        <button \n                            className={`button sorting-button ${selectedAlgorithm !== \"insertion\" && buttonsClickable}`} \n                            style={selectedAlgorithm===\"insertion\" ? selectedButtonStyle : null} \n                            onClick={() => handleInsertionSort()}\n                        >\n                            Insertion Sort\n                        </button>\n                    </span>\n                </div>\n                <div className=\"button-set ascending-control\" style={{borderColor: ascending ? \"#ff00ff\": \"#ff00a1\"}}> \n                    <h3 className=\"header\">Sort: {ascending ? <i style={{color:\"#BA55D3\"}}>Ascending</i> : <i style={{color:\"#C71585\"}}>Descending</i>}</h3>\n                    <label className=\"switch\">\n                        <input type=\"checkbox\" onClick={()=>toggleAscending()}/>\n                        <span className=\"slider-sortOrder round\"></span>\n                    </label>\n                </div>\n                <div className=\"button-set speed-elements\" style={{borderImage: `linear-gradient(45deg, ${displayedElementsColour}, ${displayedAnimationSpeedColour}) 1`}}>\n                    <h3 className=\"header\">Speed: <i style={{color:displayedAnimationSpeedColour}}>{displayedAnimationSpeed}</i></h3>\n                    <h3 className=\"header\">Elements: <i style={{color:displayedElementsColour}}>{displayedNumElements}</i></h3>\n                </div>\n                <div className=\"button-set settings\">\n                    <h3 className=\"header\">Settings</h3>\n                    <button onClick={()=>toggleSettings()} className=\"cog\"><span className=\"fa fa-gears fa-2x\"></span></button>\n                </div>\n            </div>\n            {settingsOpen && <Popup\n                border_colour = {button_colour}\n                content={<div>\n                            <h3>Animation Speed</h3>\n                            <div className=\"popup-row\">\n                                <div className=\"popup-column column-triple\">\n                                    <button \n                                        className='button slow-button'\n                                        onClick={() => updateAnimationSpeed(\"slow\")}\n                                        style={animationSpeed === \"slow\" ? { backgroundColor: \"#fa8072\", color: \"white\", pointerEvents: \"none\" } : null}\n                                    >\n                                        Slow\n                                    </button>\n                                </div>\n                                <div className=\"popup-column column-triple\">\n                                    <button \n                                        className='button medium-button'\n                                        onClick={() => updateAnimationSpeed(\"medium\")}\n                                        style={animationSpeed === \"medium\" ? { backgroundColor: \"#ffa500\", color: \"white\", pointerEvents: \"none\" } : null}\n                                    >\n                                        Medium\n                                    </button>\n                                </div>\n                                <div className=\"popup-column column-triple\">\n                                    <button \n                                        className='button fast-button' \n                                        onClick={() => updateAnimationSpeed(\"fast\")}\n                                        style={animationSpeed === \"fast\" ? { backgroundColor: \"#3cb371\", color: \"white\", pointerEvents: \"none\"} : null}\n                                    >\n                                        Fast\n                                    </button>\n                                </div>\n                            </div>\n                            <br></br>\n                            <h3>Number of Elements</h3>\n                            <div className=\"popup-row\">\n                                <div className=\"popup-column column-double\">\n                                    <div className=\"slidecontainer\">\n                                        <input type=\"range\" min={MIN_LEN} max={MAX_LEN} value={numElements} className=\"slider\" id=\"myRange\" onChange={(e) => updateNumElements(e)}/>\n                                    </div>\n                                </div>\n                                <div className=\"popup-column column-double\">\n                                    <span>\n                                        Value: \n                                        <input  className=\"numElements-input\" \n                                                type=\"number\" \n                                                min={MIN_LEN} \n                                                max={MAX_LEN} \n                                                style={{color:numElementsColour}} \n                                                value={numElements} \n                                                onChange={(e)=>updateNumElements(e)}\n                                        />\n                                    </span>\n                                </div>\n                            </div>\n                            <div className=\"popup-row\">\n                                <div className=\"popup-column\">\n                                    <div>{MIN_LEN}</div>\n                                </div>\n                                <div className=\"popup-column fifty\">\n                                    <div>{MAX_LEN}</div>\n                                </div>\n                            </div>\n                            <br></br>\n                            <div>\n                            <button className=\"button done-button\"\n                                    onClick={() => toggleSettings()}\n                                    style={{border: `2px solid ${button_colour}`, backgroundColor:doneButtonColour}}\n                                    onMouseEnter={() => toggleDoneButtonColour(true, button_colour)}\n                                    onMouseLeave={() => toggleDoneButtonColour(false, button_colour)}>\n                                Done\n                            </button>\n                            </div>\n                    </div>}\n            />}\n            {progress > 0 && progress <= 100 && <ProgressBar progress={progress}/>}\n        </div>\n    );\n}\n\n","import './App.css';\nimport {SortingVisualizer} from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}